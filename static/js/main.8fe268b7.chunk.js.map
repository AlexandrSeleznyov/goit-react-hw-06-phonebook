{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.jsx","App.js","hooks/UseLocalStorage.jsx","index.js","components/ContactForm/ContactForm.module.css"],"names":["ContactForm","formSubmitHandler","useState","name","setName","number","setNumber","handleInput","e","target","value","resetState","className","s","contactForm","onSubmit","preventDefault","newData","id","uuidv4","onChange","type","placeholder","pattern","title","required","Filter","filter","handleInputName","ContactsList","contacts","deleteContact","map","contact","onClick","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","setFilter","data","find","alert","normalizedFilter","toLowerCase","item","includes","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uOAKe,SAASA,EAAT,GAA6C,IAAtBC,EAAqB,EAArBA,kBACpC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAc,SAACC,GACnB,MAAwBA,EAAEC,OAAlBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MAEL,SAATP,EAAkBC,EAAQM,GAASJ,EAAUI,IAezCC,EAAa,WACjBP,EAAQ,IACRE,EAAU,KAGZ,OACE,uBAAMM,UAAWC,IAAEC,YAAaC,SAlBb,SAACP,GACpBA,EAAEQ,iBAEF,IAAMC,EAAU,CACdd,OACAE,SACAa,GAAIC,eAENlB,EAAkBgB,GAClBN,KASA,UACE,0CAEE,uBACES,SAAUb,EACVc,KAAK,OACLX,MAAOP,EACPA,KAAK,OACLmB,YAAY,mBACZC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,4CAEE,uBACEL,SAAUb,EACVc,KAAK,MACLX,MAAOL,EACPF,KAAK,SACLmB,YAAY,SACZC,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQJ,KAAK,SAAb,uEC5DN,IAkBeK,EAlBA,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,gBACxB,OACE,2DAEE,uBACER,SAAUQ,EACVP,KAAK,OACLX,MAAOiB,EACPxB,KAAK,SACLmB,YAAY,YACZC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,QCGDI,MAff,YAAoD,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cAChC,OACE,6BACGD,IAAWE,KAAI,SAACC,GAAD,OACd,+BACGA,EAAQ9B,KADX,KACmB8B,EAAQ5B,OACzB,wBAAQgB,KAAK,SAASa,QAAS,kBAAMH,EAAcE,IAAnD,sBAFOA,EAAQf,UCyCViB,MAtCf,WACE,MCNa,SAAyBC,EAAKC,GAC3C,MAA0BnC,oBAAS,WAAO,IAAD,EACvC,iBAAOoC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQN,WAA9C,QAAuDC,KADzD,mBAAOM,EAAP,KAAcC,EAAd,KAQA,OAJAC,qBAAU,WACRL,OAAOC,aAAaK,QAAQV,EAAKE,KAAKS,UAAUJ,MAC/C,CAACP,EAAKO,IAEF,CAACA,EAAOC,GDHiBI,CAAgB,WAAY,IAA5D,mBAAOlB,EAAP,KAAiBmB,EAAjB,KACA,EAA4B/C,mBAAS,IAArC,mBAAOyB,EAAP,KAAeuB,EAAf,KA0BA,OACE,gCACE,2CACA,cAAClD,EAAD,CAAaC,kBA3BS,SAACkD,GACRrB,EAASsB,MAAK,SAACnB,GAC9B,OAAOA,EAAQ9B,OAASgD,EAAKhD,QAI3BkD,MAAM,GAAD,OAAIF,EAAKhD,KAAT,2BADL8C,EAAY,CAACE,GAAF,mBAAWrB,QAuBxB,0CACA,cAAC,EAAD,CAAQH,OAAQA,EAAQC,gBApBF,SAACpB,GACzB0C,EAAU1C,EAAEC,OAAOC,UAoBjB,cAAC,EAAD,CAAcoB,SAjBM,WACtB,IAAMwB,EAAmB3B,EAAO4B,cAChC,OAAOzB,EAASH,QAAO,SAAC6B,GAAD,OACrBA,EAAKrD,KAAKoD,cAAcE,SAASH,OAcQvB,cAVvB,SAACoB,GACrB,OAAOF,EAAYnB,EAASH,QAAO,SAACM,GAAD,OAAaA,EAAQf,KAAOiC,EAAKjC,cE5BxEwC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCP1BC,EAAOC,QAAU,CAAC,YAAc,oC","file":"static/js/main.8fe268b7.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport s from \"./ContactForm.module.css\";\n\nexport default function ContactForm({ formSubmitHandler }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleInput = (e) => {\n    const { name, value } = e.target;\n\n    name === \"name\" ? setName(value) : setNumber(value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const newData = {\n      name,\n      number,\n      id: uuidv4(),\n    };\n    formSubmitHandler(newData);\n    resetState();\n  };\n\n  const resetState = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form className={s.contactForm} onSubmit={handleSubmit}>\n      <label>\n        Name:\n        <input\n          onChange={handleInput}\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          placeholder=\"New contact name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label>\n        Number:\n        <input\n          onChange={handleInput}\n          type=\"tel\"\n          value={number}\n          name=\"number\"\n          placeholder=\"Number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Отправить</button>\n    </form>\n  );\n}\n","const Filter = ({ filter, handleInputName }) => {\n  return (\n    <label>\n      Find contacts by name:\n      <input\n        onChange={handleInputName}\n        type=\"text\"\n        value={filter}\n        name=\"filter\"\n        placeholder=\"find name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","function ContactsList({ contacts, deleteContact }) {\n  return (\n    <ul>\n      {contacts().map((contact) => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button type=\"button\" onClick={() => deleteContact(contact)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactsList;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactsList from \"./components/ContactsList/ContactsList\";\nimport useLocalStorage from \"./hooks/UseLocalStorage\";\n\nfunction App() {\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\n  const [filter, setFilter] = useState(\"\");\n\n  const formSubmitHandler = (data) => {\n    const findName = contacts.find((contact) => {\n      return contact.name === data.name;\n    });\n    !findName\n      ? setContacts([data, ...contacts])\n      : alert(`${data.name} is already in contact`);\n  };\n\n  const handleInputFilter = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const visibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter((item) =>\n      item.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const deleteContact = (data) => {\n    return setContacts(contacts.filter((contact) => contact.id !== data.id));\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm formSubmitHandler={formSubmitHandler} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} handleInputName={handleInputFilter} />\n      <ContactsList contacts={visibleContacts} deleteContact={deleteContact} />\n    </div>\n  );\n}\nexport default App;\n","import { useState, useEffect } from \"react\";\r\n\r\nexport default function useLocalStorage(key, defaultValue) {\r\n  const [state, setState] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\r\n  });\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n\r\n  return [state, setState];\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__z0DHq\"};"],"sourceRoot":""}