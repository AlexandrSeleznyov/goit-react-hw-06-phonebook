{"version":3,"sources":["components/ContactForm/ContactForm.module.css","redux/actions.js","components/ContactForm/ContactForm.jsx","redux/selectors.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.jsx","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","addContacts","createAction","value","payload","id","uuidv4","name","number","deleteContacts","filterContacts","ContactForm","useState","setName","setNumber","dispatch","useDispatch","handleInput","e","target","resetState","className","s","contactForm","onSubmit","preventDefault","actions","onChange","type","placeholder","pattern","title","required","getFilter","state","items","filter","getVisibleContacts","contacts","getContacts","normalizedFilter","toLowerCase","item","includes","Filter","useSelector","ContactsList","deleteContact","visibleContacts","map","contact","onClick","App","createReducer","find","alert","_","combineReducers","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","middleware","logger","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,YAAc,mC,0GCGnBC,EAAcC,YAAa,WAAW,SAACC,GAAD,MAAY,CAC7DC,QAAS,CACPC,GAAIC,cACJC,KAAMJ,EAAMI,KACZC,OAAQL,EAAMK,YAILC,EAAiBP,YAAa,cAE9BQ,EAAiBR,YAAa,c,+BCP5B,SAASS,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOL,EAAP,KAAaM,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOJ,EAAP,KAAeM,EAAf,KAEMC,EAAWC,cAEXC,EAAc,SAACC,GACnB,MAAwBA,EAAEC,OAAlBZ,EAAR,EAAQA,KAAMJ,EAAd,EAAcA,MAEL,SAATI,EAAkBM,EAAQV,GAASW,EAAUX,IASzCiB,EAAa,WACjBP,EAAQ,IACRC,EAAU,KAGZ,OACE,uBAAMO,UAAWC,IAAEC,YAAaC,SAZb,SAACN,GACpBA,EAAEO,iBACFV,EAASW,EAAoB,CAAEnB,OAAMC,YACrCY,KASA,UACE,0CAEE,uBACEO,SAAUV,EACVW,KAAK,OACLzB,MAAOI,EACPA,KAAK,OACLsB,YAAY,mBACZC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,4CAEE,uBACEL,SAAUV,EACVW,KAAK,MACLzB,MAAOK,EACPD,KAAK,SACLsB,YAAY,SACZC,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQJ,KAAK,SAAb,uEC1DC,IAEMK,EAAY,SAACC,GAAD,OAAWA,EAAMC,MAAMC,QAEnCC,EAAqB,SAACH,GACjC,IAAMI,EALmB,SAACJ,GAAD,OAAWA,EAAMC,MAAMG,SAK/BC,CAAYL,GAEvBM,EADSP,EAAUC,GACOO,cAChC,OAAOH,EAASF,QAAO,SAACM,GAAD,OACrBA,EAAKnC,KAAKkC,cAAcE,SAASH,OCetBI,EApBA,WACb,IAAM7B,EAAWC,cACXoB,EAASS,YAAYZ,GAC3B,OACE,2DAEE,uBACEN,SAAU,SAACT,GAAD,OAAOH,EAASW,EAAuBR,EAAEC,OAAOhB,SAC1DyB,KAAK,OACLzB,MAAOiC,EACP7B,KAAK,SACLsB,YAAY,YACZC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,QCSDc,MAtBf,YAAmD,EAA3BR,SAA2B,EAAjBS,cAAkB,IAC5ChC,EAAWC,cAEXgC,EAAkBH,YAAYR,GAEpC,OACE,6BACGW,EAAgBC,KAAI,SAACC,GAAD,OACnB,+BACGA,EAAQ3C,KADX,KACmB2C,EAAQ1C,OACzB,wBACEoB,KAAK,SACLuB,QAAS,kBAAMpC,EAASW,EAAuBwB,KAFjD,sBAFOA,EAAQ7C,UCMV+C,I,EAAAA,EAXf,WACE,OACE,gCACE,2CACA,cAACzC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,gECVA2B,EAAWe,YAAc,IAAD,mBAC3B5C,GAAiB,SAACyB,EAAD,OAAU9B,EAAV,EAAUA,QAAV,OAChB8B,EAAME,QAAO,SAACc,GAAD,OAAaA,EAAQ7C,KAAOD,EAAQC,SAFvB,cAI3BJ,GAAc,SAACiC,EAAD,GAAyB,IAAf9B,EAAc,EAAdA,QAIvB,OAHoB8B,EAAMoB,MAAK,SAACJ,GAC9B,OAAOA,EAAQ3C,OAASH,EAAQG,QAI9BgD,MAAM,GAAD,OAAInD,EAAQG,KAAZ,2BAFF,CACFH,GADE,mBACU8B,OATS,IAcxBE,EAASiB,YAAc,GAAD,eACzB3C,GAAiB,SAAC8C,EAAD,YAAMpD,YAGXqD,cAAgB,CAC7BnB,WACAF,WCnBIsB,EAAgB,CACpBC,IAAK,QACLC,YACAC,UAAW,CAAC,WAGRC,EAAQC,YAAe,CAC3BC,QAAS,CAAE7B,MAAO8B,YAAeP,EAAeM,IAChDE,WAAY,CAACC,KACbC,UAAUC,IAKG,GAAEP,QAAOQ,UAFNC,YAAaT,ICX/BU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,EAAMA,MAAvB,SACE,cAAC,IAAD,CAAaa,QAAQ,yDAAYL,UAAWR,EAAMQ,UAAlD,SACE,cAAC,EAAD,UAINM,SAASC,eAAe,W","file":"static/js/main.03ad6bb7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__z0DHq\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// import { ADD, DELETE, FILTER } from \"./types\";\r\n\r\nexport const addContacts = createAction(\"app/add\", (value) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name: value.name,\r\n    number: value.number,\r\n  },\r\n}));\r\n\r\nexport const deleteContacts = createAction(\"app/delete\");\r\n\r\nexport const filterContacts = createAction(\"app/filter\");\r\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport * as actions from \"../../redux/actions\";\nimport s from \"./ContactForm.module.css\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  const handleInput = (e) => {\n    const { name, value } = e.target;\n\n    name === \"name\" ? setName(value) : setNumber(value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(actions.addContacts({ name, number }));\n    resetState();\n  };\n\n  const resetState = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form className={s.contactForm} onSubmit={handleSubmit}>\n      <label>\n        Name:\n        <input\n          onChange={handleInput}\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          placeholder=\"New contact name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label>\n        Number:\n        <input\n          onChange={handleInput}\n          type=\"tel\"\n          value={number}\n          name=\"number\"\n          placeholder=\"Number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\">Отправить</button>\n    </form>\n  );\n}\n","export const getContacts = (state) => state.items.contacts;\r\n\r\nexport const getFilter = (state) => state.items.filter;\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return contacts.filter((item) =>\r\n    item.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n","import { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../redux/actions\";\nimport { getFilter } from \"../../redux/selectors\";\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  return (\n    <label>\n      Find contacts by name:\n      <input\n        onChange={(e) => dispatch(actions.filterContacts(e.target.value))}\n        type=\"text\"\n        value={filter}\n        name=\"filter\"\n        placeholder=\"find name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { getVisibleContacts } from \"../../redux/selectors\";\nimport * as actions from \"../../redux/actions\";\nimport { connect } from \"react-redux\";\n\nfunction ContactsList({ contacts, deleteContact }) {\n  const dispatch = useDispatch();\n\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  return (\n    <ul>\n      {visibleContacts.map((contact) => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button\n            type=\"button\"\n            onClick={() => dispatch(actions.deleteContacts(contact))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ContactsList;\n","import React from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactsList from \"./components/ContactsList/ContactsList\";\nimport { getContacts } from \"./redux/selectors\";\nimport { useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\n\nfunction App() {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n}\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import * as types from \"./types\";\r\nimport { addContacts, deleteContacts, filterContacts } from \"./actions\";\r\n\r\nconst contacts = createReducer([], {\r\n  [deleteContacts]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload.id),\r\n\r\n  [addContacts]: (state, { payload }) => {\r\n    const findContact = state.find((contact) => {\r\n      return contact.name === payload.name;\r\n    });\r\n    return !findContact\r\n      ? [payload, ...state]\r\n      : alert(`${payload.name} is already in contact`);\r\n  },\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n","import logger from \"redux-logger\";\r\nimport { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst persistConfig = {\r\n  key: \"hello\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: { items: persistReducer(persistConfig, reducer) },\r\n  middleware: [logger],\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading=\"загружаем\" persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}